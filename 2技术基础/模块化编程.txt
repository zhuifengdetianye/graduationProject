随着网站逐渐变成“互联网应用程序”，嵌入网页的JavaScript越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试等等，开发者不得不使用软件工程的方法，管理网页的业务和逻辑。JavaScript模块化编程已成为一个迫切的要求，理想情况下，开发者只要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。

模块的规范
因为有了模块，我们可以更方便地使用别人的代码，但是这样做有一个前提，那就是大家必须以同样的方式编写代码。目前，通行的JavaScript模块规范公有两种：CommonJS和AMD。

CommonJS
2009年，美国程序员Ryan Dahl创造了node.js项目，将JavaScript语言用于服务器端编程。这标志“JavaScript模块化编程”正式诞生。虽然在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。
CommonjS对模块的定义十分简单，主要分为模块引用、模块定义和模块标识3个部分，node.js的模块系统，就是参照CommonJS规范实现的。

AMD
AMD是“Asynchronous Module Definition”的缩写，意思就是“异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。

